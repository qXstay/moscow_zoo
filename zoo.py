import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import logging
import urllib.parse
import os
from utils_zoo import AnimalQuiz
import random
import time
from dotenv import load_dotenv
from telebot import apihelper

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')

logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class TotemAnimalBot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.user_data = {}
        self.quiz = AnimalQuiz()
        self.setup_handlers()

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def send_welcome(message):
            self.user_data[message.chat.id] = {'answers': [], 'scores': []}

            welcome_text = (
                "üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞! üêæ\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
                "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —á–µ—Ä–µ–∑ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n"
                "‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫—É–Ω—Å—Ç–≤–∞ –Ω–∞–¥ –∂–∏–≤–æ—Ç–Ω—ã–º–∏\n"
                "‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –∑–æ–æ–ø–∞—Ä–∫–∞\n"
                "‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                "/quiz - –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n"
                "/guardianship - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ–∫—É–Ω—Å—Ç–≤–µ\n"
                "/contact - –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–æ–æ–ø–∞—Ä–∫–∞\n"
                "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ! ü¶Å"
            )

            self.bot.send_message(message.chat.id, welcome_text)
            self.user_data[message.chat.id] = {'answers': [], 'scores': []}
            self.send_main_menu(message.chat.id)

        @self.bot.message_handler(commands=['help'])
        def help_command(message):
            self.send_help(message.chat.id)

        @self.bot.message_handler(commands=['feedback'])
        def feedback_command(message):
            self.collect_feedback(message.chat.id)

        @self.bot.message_handler(commands=['guardianship'])
        def guardianship_command(message):
            self.send_guardianship_info(message.chat.id)

        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_query(call):
            try:
                if call.data == 'start_quiz':
                    self.start_quiz(call.message.chat.id)
                elif call.data.startswith('q'):
                    self.process_quiz_answer(call)
                elif call.data == 'learn_more':
                    self.send_guardianship_info(call.message.chat.id)
                elif call.data == 'retry':
                    self.start_quiz(call.message.chat.id)
                elif call.data == 'send_message':
                    self.handle_send_message(call)
            except Exception as e:
                logging.error(f"Error handling callback: {e}")


        @self.bot.message_handler(commands=['contact'])
        def contact_command(message):
            self.contact_staff(message.chat.id)

        @self.bot.message_handler(func=lambda message: message.text in ["–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", "–ü–æ–º–æ—â—å", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"])
        def handle_main_menu(message):
            try:
                if message.text == "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É":
                    self.start_quiz(message.chat.id)
                elif message.text == "–ü–æ–º–æ—â—å":
                    self.send_help(message.chat.id)
                elif message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
                    self.contact_staff(message.chat.id)
                elif message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
                    self.collect_feedback(message.chat.id)
            except Exception as e:
                logging.error(f"Error handling main menu: {e}")

        @self.bot.message_handler(commands=['quiz'])
        def quiz_command(message):
            self.start_quiz(message.chat.id)

    def handle_send_message(self, call):
        self.bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        self.bot.register_next_step_handler(call.message, self.process_message)

    def process_message(self, message):
        user_message = message.text
        self.bot.send_message(message.chat.id, f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}' –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ —Ñ–∞–π–ª
        try:
           self.save_feedback(user_message, message.chat.id)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
            self.bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    def collect_feedback(self, chat_id):
        self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
        self.bot.register_next_step_handler_by_chat_id(chat_id, self.process_message)

    def save_feedback(self, feedback_text, user_id):
        with open('feedback.txt', 'a', encoding='utf-8') as file:
            file.write(f"–û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {feedback_text}\n")
        logging.info("–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

    def start_quiz(self, chat_id):
        self.user_data[chat_id] = {'answers': [], 'scores': []}
        self.ask_question(chat_id, 0)

    def ask_question(self, chat_id, question_number):
        question_data = self.quiz.questions[question_number]
        markup = InlineKeyboardMarkup()
        for i, option in enumerate(question_data["options"]):
            markup.add(InlineKeyboardButton(option, callback_data=f'q{question_number}{i}'))
        self.bot.send_message(chat_id, question_data["question"], reply_markup=markup)

    def process_quiz_answer(self, call):
        question_number = int(call.data[1])
        answer_index = int(call.data[2])
        score = self.quiz.questions[question_number]["weights"][answer_index]
        self.user_data[call.message.chat.id]['answers'].append(answer_index)
        self.user_data[call.message.chat.id]['scores'].append(score)

        if question_number < len(self.quiz.questions) - 1:
            self.ask_question(call.message.chat.id, question_number + 1)
        else:
            animal_name, image_path, info = self.quiz.determine_animal(self.user_data[call.message.chat.id]['answers'])
            self.send_animal_result(call.message.chat.id, animal_name, image_path, info)
            del self.user_data[call.message.chat.id]

    def send_animal_result(self, chat_id, animal_name, image_path, info):
        guardianship_info = (
            "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º —ç—Ç–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –≤–∞—à–µ–º —Ç–æ—Ç–µ–º–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º. "
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
        )
        if image_path:
            with open(image_path, 'rb') as photo:
                self.bot.send_photo(chat_id, photo, caption=f"–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {animal_name}\n\n{info}\n\n{guardianship_info}")
        else:
            self.bot.send_message(chat_id, f"–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {animal_name}. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n{info}\n\n{guardianship_info}")

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?", callback_data='retry'))
        markup.add(InlineKeyboardButton("‚ù§Ô∏è–û–ø–µ–∫—É–Ω—Å—Ç–≤–æ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ", callback_data='learn_more'))
        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        self.share_results(chat_id, animal_name)

    def send_guardianship_info(self, chat_id):
        guardianship_info = (
            "‚ù§Ô∏è–û–ø–µ–∫–∞—Ç—å ‚Äì –∑–Ω–∞—á–∏—Ç –ø–æ–º–æ–≥–∞—Ç—å –ª—é–±–∏–º—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º.\n"
            "–£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–ö–ª—É–± –¥—Ä—É–∑–µ–π –∑–æ–æ–ø–∞—Ä–∫–∞¬ª ‚Äî —ç—Ç–æ –ø–æ–º–æ—â—å –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –Ω–∞—à–∏—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π, "
            "–∞ —Ç–∞–∫–∂–µ –≤–∞—à –ª–∏—á–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –¥–µ–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ó–µ–º–ª–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞—à–µ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞.\n"
            "ü•π–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç—Ç–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ "
            "–±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø–ª–∞–Ω–µ—Ç—ã. –ö–æ–≥–¥–∞ –≤—ã –±–µ—Ä–µ—Ç–µ –ø–æ–¥ –æ–ø–µ–∫—É –∂–∏–≤–æ—Ç–Ω–æ–µ, –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º –≤ —ç—Ç–æ–º –±–ª–∞–≥–æ—Ä–æ–¥–Ω–æ–º "
            "–¥–µ–ª–µ.\n\n–°—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!\n-–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ–ø–µ–∫–∞—Ç—å.\n-–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—É–º–º—É "
            "–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è(–≤–∑–Ω–æ—Å—ã –º—ã –º–æ–∂–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å).\n-–ó–∞—Ç–µ–º –º—ã —Å –í–∞–º–∏ —Å–æ–≥–ª–∞—Å—É–µ–º –¥–æ–≥–æ–≤–æ—Ä. –û–Ω –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π,\n–æ–±–µ—â–∞–µ–º üòá\n"
            "-–ì–æ—Ç–æ–≤–æ! –ñ–¥–µ–º –í–∞—Å –≤ –≥–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –í–∞–º –í–∞—à—É –∫–∞—Ä—Ç—É –æ–ø–µ–∫—É–Ω–∞.\n\n‚ú®–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–ø–µ–∫—É–Ω—Å—Ç–≤–µ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ."
        )
        markup = InlineKeyboardMarkup()
        guardianship_button = InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", url="https://moscowzoo.ru/about/guardianship")
        markup.add(guardianship_button)
        self.bot.send_message(chat_id, guardianship_info, reply_markup=markup)



    def send_main_menu(self, chat_id):
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"),
                   KeyboardButton("–ü–æ–º–æ—â—å"),
                   KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
                   KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
        self.bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    def send_help(self, chat_id):
        help_text = (
            "üêæ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞:\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/quiz - –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—Ç–µ–º–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ\n"
            "/guardianship - –£–∑–Ω–∞—Ç—å –æ–± –æ–ø–µ–∫—É–Ω—Å—Ç–≤–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö\n"
            "/contact - –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–æ–æ–ø–∞—Ä–∫–∞\n"
            "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n\n"
            "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
        )
        self.bot.send_message(chat_id, help_text)

    def contact_staff(self, chat_id):
        contact_info = (
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n"
            "–ù–∞—à —Å–∞–π—Ç: https://moscowzoo.ru/\n"
            "Telegram: https://t.me/Moscowzoo_official\n"
            "YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@Moscowzooofficial\n"
            "–°–æ–æ–±—â–µ—Å—Ç–≤–æ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/moscow_zoo\n"
            "–ì—Ä—É–ø–ø–∞ –≤ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö: https://ok.ru/moscowzoo\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +7 499 252 29 51\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data='send_message'))
        self.bot.send_message(chat_id, contact_info, reply_markup=markup)

    def share_results(self, chat_id, animal_name):
        share_text = f"–ú–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {animal_name}! –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ—ë —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞!"
        bot_link = "https://t.me/MoscowZooQxstay_bot"

        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è URL
        encoded_link = urllib.parse.quote_plus(bot_link)
        encoded_text = urllib.parse.quote_plus(share_text)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        telegram_url = f"https://t.me/share/url?url={encoded_link}&text={encoded_text}"
        vk_url = f"https://vk.com/share.php?url={encoded_link}&title={encoded_text}"
        ok_url = f"https://connect.ok.ru/offer?url={encoded_link}&title={encoded_text}"
        whatsapp_url = f"https://api.whatsapp.com/send?text={encoded_text}%20{encoded_link}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        options_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram", url=telegram_url)],
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url=vk_url)],
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö", url=ok_url)],
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ WhatsApp", url=whatsapp_url)]

    ])
        self.bot.send_message(chat_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:", reply_markup=options_markup)

    def run(self):
        try:
            logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
            self.bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
            self.run()

#–£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
bot = telebot.TeleBot(API_TOKEN)
bot.delete_webhook()

if __name__ == "__main__":
    bot = TotemAnimalBot(API_TOKEN)
    bot.run()
